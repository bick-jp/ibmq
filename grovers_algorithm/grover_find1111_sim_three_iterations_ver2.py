from qiskit import QuantumProgram
from qiskit.tools.visualization import plot_histogram, circuit_drawer
from math import pi

qp = QuantumProgram()

nq = 4  # number of qubits
q = qp.create_quantum_register("q", nq)
c = qp.create_classical_register("c", nq)

circuits = ['testQ']
testQ = qp.create_circuit(circuits[0], [q], [c])

# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])


# Grover's iteration 1st
## Apply CCCZ gate. This is the oracle to negate |1111>
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
## Oracle end ##


## Diffusion operator to amplify the probability amplitude of |1111>
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply CCCZ gate
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
## Diffusion operator end ##



## Grover's iteration 2nd
## Apply CCCZ gate. This is the oracle to negate |1111>
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
## Oracle end ##


## Diffusion operator to amplify the probability amplitude of |1111>
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply CCCZ gate
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
## Diffusion operator end ##




## Grover's iteration 3rd
## Apply CCCZ gate. This is the oracle to negate |1111>
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
## Oracle end ##


## Diffusion operator to amplify the probability amplitude of |1111>
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply CCCZ gate
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.t(q[3])
testQ.cx(q[2],q[3])
testQ.tdg(q[2])
testQ.tdg(q[3])
testQ.h(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.t(q[2])
testQ.cx(q[1],q[2])
testQ.tdg(q[2])
testQ.cx(q[0],q[2])
testQ.tdg(q[1])
testQ.t(q[2])
testQ.cx(q[0],q[1])
testQ.h(q[2])
testQ.tdg(q[1])
testQ.cx(q[0],q[1])
testQ.t(q[0])
testQ.s(q[1])
testQ.cx(q[2],q[3])
testQ.tdg(q[3])
testQ.cx(q[2],q[3])
testQ.t(q[2])
testQ.t(q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[1])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[1])
testQ.cx(q[1],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[1],q[3])
testQ.u1((pi/8), q[1])
testQ.u1((pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((-pi/8), q[3])
testQ.cx(q[0],q[3])
testQ.u1((pi/8), q[0])
testQ.u1((pi/8), q[3])
# Apply X gate
testQ.x(q[0])
testQ.x(q[1])
testQ.x(q[2])
testQ.x(q[3])
# Apply H gate
testQ.h(q[0])
testQ.h(q[1])
testQ.h(q[2])
testQ.h(q[3])
## Diffusion operator end ##

# Measurement
testQ.measure(q[0], c[0])
testQ.measure(q[1], c[1])
testQ.measure(q[2], c[2])
testQ.measure(q[3], c[3])

# Execution
results = qp.execute(circuits, backend='local_qasm_simulator', shots=8192, seed=1) 

# Show result as histogram
plot_histogram(results.get_counts(circuits[0]))

#circuit_drawer(testQ)